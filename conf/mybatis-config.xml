<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--
        resource：引入类路径下的资源
        url:引入网络路径或者磁盘路径下的资源
    -->
    <properties resource="db.properties"></properties>

    <settings>
        <!--是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn 的类似映射。-->
        <!--开启之后，之前的last_name不用写别名就可以查出来了，因为符合驼峰命名规则-->
        <setting name="mapUnderscoreToCamelCase" value="true"/>
        <!--全局配置中,jdbcTypeForNull默认是OTHER,但oracle不支持
            所以，解决方法有两种：
                A 在字段里加上jdbcType=NULL：eg:#{email,jdbcType=NULL}
                B 全局配置setting中配置jdbcTypeForNull
        -->
        <setting name="jdbcTypeForNull" value="NULL"/>
    </settings>
    
    <typeAliases>
        <!--别名处理器：可以为Java类型起别名-->
        <!--type：指定要起别名的类型全类名
            alias：指定新的别名，不写该属性的话默认别名就是类名.不区分大小写！！

        -->
        <!--<typeAlias type="com.atguigu.mybatis.bean.Employee" alias="employee2"></typeAlias>-->

        <!--package: 批量起别名-->
        <!--name: 指定包名（为当前包以及子包下所有类起默认别名）-->
        <!--但有个问题：当前包和子包下有相同的类时，就会报错：
                可以在具体的bean类上加上注解：@Alias("新别名")
        -->
        <!--java内部已经写好一些常用的列名，如基本类型，包装类型以及list,map等，
            记得自己起的别名不要与这些一样，否则报错！！！！！！
            推荐还是全类名好，这样sql语句与哪个类对应起来好找些！！！！！！！！
        -->
        <package name="com.atguigu.mybatis.bean"></package>
    </typeAliases>



    <!--environments环境们，mybatis可以配置多种环境，default指定使用某种环境。可以达到快速切换环境的效果
            environment：配置一个具体的环境信息，必须有两个标签，id代表当前环境的唯一标识
                transactionManager：事务管理器.<在 MyBatis 中有两种类型的事务管理器（也就是 type=”[JDBC|MANAGED]”）：>
                    type：事务管理器的类型：JDBC(JdbcTransactionFactory)|MANAGED(ManagedTransactionFactory)
                可以自定义事务管理器：实现TransactionFactory接口，type指定全类名
                dataSource：数据源 <有三种内建的数据源类型（也就是 type=”[UNPOOLED|POOLED|JNDI]”）：>
                    type:数据源类型：UNPOOLED(UnpooledDataSourceFactory)
                                    |POOLED(PooledDataSourceFactory)
                                    |JNDI(JndiDataSourceFactory)
                可以自定义数据源：实现DataSourceFactory接口，type为全类名

       注意：上面信息结合官方文档和Configuration类找，事务管理器和数据源会以后统一被spring统一管理！！！！！
    -->
    <environments default="development">

        <environment id="development">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <property name="driver" value="${jdbc.driver}"/>
                <property name="url" value="${jdbc.url}"/>
                <property name="username" value="${jdbc.username}"/>
                <property name="password" value="${jdbc.password}"/>
                <!--<property name="driver" value="com.mysql.jdbc.Driver"/>
                <property name="url" value="jdbc:mysql://localhost:3306/mybatis"/>
                <property name="username" value="root"/>
                <property name="password" value="root"/>-->
            </dataSource>
        </environment>

        <environment id="dev_oracle">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <property name="driver" value="${orcl.driver}"/>
                <property name="url" value="${orcl.url}"/>
                <property name="username" value="${orcl.username}"/>
                <property name="password" value="${orcl.password}"/>
            </dataSource>
        </environment>


    </environments>


    <!--datavaseIdProvider: 支持多数据库厂商的
        type="DB_VENDOR" VendorDatabaseIdProvider
        作用就是得到数据库厂商的标识
            驱动里的方法，即jdk里的：
            Connection的DatabaseMetaData getMetaData() throws SQLException
            DatabaseMetaData的String getDatabaseProductName()throws SQLException
        mybatis就是根据数据库厂商的标识来执行不同的sql
    -->
    <databaseIdProvider type="DB_VENDOR">
        <!--value值即是为不同的数据库起的别名-->
        <property name="MYSQL" value="mysql"/>
        <property name="Oracle" value="oracle"/>
        <property name="Sql Server" value="sqlserver"/>
        <property name="DB2" value="db2"/>
    </databaseIdProvider>

    <!--将写好的sql映射文件配置到全局配置文件中-->
    <mappers>
        <!--resource：引用类路径下的sql映射文件
            url:引用网络或磁盘路径下的sql映射文件
            class:引用注册接口
                A 有sql映射文件，映射文件必须和接口同名且在同一目录下
                B 没有sql映射文件，所有的sql都在用注解写在接口上


         注意：
            推荐：
                比较重要的，复杂的dao接口写sql映射文件；
                不重要的，简单的dao接口为了开发快速可以使用注解

        -->

        <mapper resource="mybatis/mapper/EmployeeMapper.xml"/>
        <mapper resource="mybatis/mapper/EmployeeMapper2.xml"/>
        <mapper resource="mybatis/mapper/StuDentMapper.xml"/>

        <mapper class="com.atguigu.mybatis.dao.EmployeeMapperAnnotation"/>


        <!--批量注册：同样，基于注解的方式可以，基于映射文件的要与接口同名同路径-->
        <!--<package name="com.atguigu.mybatis.dao"></package>-->



    </mappers>
</configuration>
<!--configuration下的一级子标签是有顺序要求的！！！！-->